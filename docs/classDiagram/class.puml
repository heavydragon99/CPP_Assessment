@startuml

' skinparam backgroundColor #1e1e1e
' skinparam classBackgroundColor #2d2d2d
' skinparam classBorderColor White
' skinparam classFontColor White
' skinparam classAttributeIconColor White
' skinparam classArrowColor White

package "Sean"{
    class Vector{

    }

    class UniquePtr{}

    class CharArray{}

    enum Direction{
        North
        South
        East
        West
    }

    enum ObjectType{
        Gold
        Weapon
        Armor
        Consumable
    }

    struct ParsedLocations{
        - mId : int
        - mExits : Direction[4]
        - mEnemies : Sean::Vector<Sean::CharArray>
        - mHiddenObjects : Sean::Vector<Sean::CharArray>
        - mVisibleObjects : Sean::Vector<Sean::CharArray>
        - mName : Sean::CharArray
        - mDescription : Sean::CharArray
    }
}


package "Backend"{

    class Location{
        - mNaam :char[]
        - mDescription : char[]
        - mVisibleObjects : Sean::Vector<Sean::UniquePtr<GameObject>>
        - mInVisibleObjects : Sean::Vector<Sean::UniquePtr<GameObject>>
        - mEnemies : Sean:Vector<Sean::UniquePtr<Enemy>>
        - mExits : &Location[]


        'short description. Enemies
        + printShortDescription() : void
        'long description. Enemies. Visible Items
        + printLongDescription() : void
        + update() : void
    }


    class LocationFactory{
        +{static} CreateLocation() : *Location
    }

    class GameObjectFactory{
        +{static} CreateGameObject() : *GameObject
    }

    class EnemyFactory{
        +{static} CreateEnemy() : *Enemy
    }

    class GameObject{
        -mName : char[]
        -mDescription : char[]
        -mType : ObjectType
    }

    class GoldObject{
        - mAmount : int
    }

    class WeaponObject{
        - mMinimumDamage : int
        - mMaximumDamage : int
    }

    class ArmorObject{
        - mArmor : int
    }

    class Enemy{
        - mHealth : int
        - mAttackPercentage : int
        - mHiddenObjects : Sean:Vector<Sean::UniquePtr<GameObject>>
        - mMinimumDamage : int
        - mMaximumDamage : int
    }

    class ConsumableObject{}

    class Map{
        - mLocations : Sean:Vector<Sean::UniquePtr<Location>>

        + update() : void
    }

    class Dungeon{
        + Dungeon(&std::vector<ParsedLocations> aLocations) : void
        + Dungeon(int aLocations) : void

        + update() : void

        - mMap : Sean::UniquePtr<Map>
    }

    class sqlReader{}

    Location -- "Visible objects 0..*" GameObject
    Location -- "Hidden Objects 0..*"GameObject

    Enemy -- "Hidden Objects 0..*" GameObject

    Location <.. LocationFactory
    GameObject <.. GameObjectFactory
    GameObject <.. EnemyFactory

    GameObject <|-- GoldObject
    GameObject <|-- WeaponObject
    GameObject <|-- ArmorObject
    GameObject <|-- ConsumableObject

    Map o-- "Locations 0..*" Location

    Dungeon o-- Map

}






package "Frontend"{

    class Player{
        - mHealth : int
        - mAttackPercentage : int
    }

    class Game{
        - initialize() : void
        + run() : void
        - loadDungeon(char *aPath) : void
        - generateDungeon() : void

        - mDungeonFacade : DungeonFacade
    }

    class xmlReader{
        + xmlReader(char *aPath) : void
        + getLocations() : &std::vector<Sean::ParsedLocations>

        - mParsedLocations : std::vector<Sean::ParsedLocations>
    }

}

' Misc
class DungeonFacade{
    - mDungeon : std::unique_ptr<Dungeon>

    + createDungeon(const &std::vector<Sean::ParsedLocations> aLocations) : void
    + generateDungeon(int aLocations) : void
}

class GameObjectFacade{
    - mGameObject : std::unique_ptr<GameObject>

}


Game -- DungeonFacade
Game o-- Player

Game -- xmlReader

DungeonFacade o-- Dungeon





@enduml