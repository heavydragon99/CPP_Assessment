@startuml classDiagram

' skinparam backgroundColor #1e1e1e
' skinparam classBackgroundColor #2d2d2d
' skinparam classBorderColor White
' skinparam classFontColor White
' skinparam classAttributeIconColor White
' skinparam classArrowColor White
' skinparam linetype ortho

package "Sean"{
    class Vector{

    }

    class UniquePtr{}

    class String{}

    class SeanObject{}

    enum Direction{
        North
        South
        East
        West
    }

    enum ObjectType{
        Gold
        Weapon
        Armor
        Consumable
    }

    struct ParsedLocations{
        - mId : int
        - mExits : Direction[4]
        - mEnemies : Sean::Vector<Sean::String>
        - mHiddenObjects : Sean::Vector<Sean::String>
        - mVisibleObjects : Sean::Vector<Sean::String>
        - mName : Sean::String
        - mDescription : Sean::String
    }
}


package "Backend"{

    class Location{
        + printShortDescription() : void
        + printLongDescription() : void
        + CreateEnemy(const char* aEnemy) : void
        + CreateVisibleGameObject(const char* aGameObject) : void
        + CreateHiddenGameObject(const char* aGameObject) : void

        - mNaam :char[]
        - mDescription : char[]
        - mVisibleObjects : Sean::Vector<GameObject>
        - mInVisibleObjects : Sean::Vector<GameObject>
        - mEnemies : Sean::Vector<Enemy>
        - mExits : &Location[]
    }


    class LocationFactory{
        +{static} CreateLocation(const char* alocation) : *Location
    }

    class GameObjectFactory{
        +{static} CreateGameObject(const char* aGameObject) : *GameObject
    }

    class EnemyFactory{
        +{static} CreateEnemy(const char* aEnemy) : *Enemy
    }

    class GameObject{
        -mName : Sean::String
        -mDescription : Sean::String
        -mType : ObjectType

        + getName() : Sean::String
        + printName() : void
        + printDescription() : void
        + getType() : ObjectType
    }

    class GoldObject{
        - mAmount : int
    }

    class WeaponObject{
        - mMinimumDamage : int
        - mMaximumDamage : int
    }

    class ArmorObject{
        - mArmor : int
    }

    class Enemy{
        - mHealth : int
        - mAttackPercentage : int
        - mHiddenObjects : Sean::Vector<GameObject>
        - mMinimumDamage : int
        - mMaximumDamage : int
    }

    class ConsumableObject{
        - mMinimum : int
        - mMaximum : int
    }

    class Dungeon{
        + Dungeon(&std::vector<ParsedLocations> aLocations) : void
        + Dungeon(int aLocations) : void

        + update() : void

        + getGameObject(const char* aGameObject) : GameObject*

        - mLocations : Sean::Vector<Location>
        - mCurrentLocation : &Location
    }

    class sqlReader{}

    Location o-- "Visible objects 0..*" GameObject
    Location o-- "Hidden Objects 0..*"GameObject

    Enemy o-- "Hidden Objects 0..*" GameObject

    GameObject <.. GameObjectFactory
    GameObject <.. EnemyFactory

    GameObject <|-- GoldObject
    GameObject <|-- WeaponObject
    GameObject <|-- ArmorObject
    GameObject <|-- ConsumableObject

    Dungeon o-- "0..*" Location
    Dungeon <-- LocationFactory
    Dungeon <-- GameObjectFactory
    Dungeon <-- EnemyFactory

    Location <.. LocationFactory

    GameObjectFactory <-- sqlReader
    EnemyFactory <-- sqlReader
    LocationFactory <-- sqlReader

}

package "Frontend"{

    class Player{
        - mName : string
        - mHealth : int
        - mAttackPercentage : int
        - mInventory : std::vector<std::unique_ptr<IGameObject>>>
        - mGold : int
        - mEquippedArmor : std::unique_ptr<IGameObject>
        - mEquippedWeapon : std::unique_ptr<IGameObject>
        - mGodMode : bool

        + printDescription() : void
        + equipWeapon(const char* aItem) : void
        + equipArmor(const char* aItem) : void
        + consumeConsumable(const char* aConsumable) : void
        + addObject(IGameObject* aObject) : void
    }

    class Game{
        + run() : void
        - initialize() : void
        - loadDungeon(char *aPath) : void
        - generateDungeon() : void
        - playerInput() : void

        - mDungeonFacade : std::uniqueptr<DungeonFacade>
        - mPlayer : std::unique_ptr<Player>
    }

    class xmlReader{
        + xmlReader(char *aPath) : void
        + getLocations() : &std::vector<Sean::ParsedLocations>

        - mParsedLocations : std::vector<Sean::ParsedLocations>
    }

    Game o-- Player

    Game <-- xmlReader

}

' Misc
class DungeonFacade{
    - mDungeon : std::unique_ptr<Dungeon>

    + createDungeon(const &std::vector<Sean::ParsedLocations> aLocations) : void
    + generateDungeon(int aLocations) : void

    + printLongDescription() : void
    + printShortDescription() : void
    + moveHiddenObjects() : void
    + getGameObject(const char* aGameObject) : GameObject*
    + putGameObject(GameObject*) : bool
    + printGameObjectDescription(const char* aGameObject) : bool
    + printEnemyDescription(const char* aEnemy) : bool
    + moveLocation(Direction aDirection) : bool
    + attackEnemy(const char* aEnemy, &WeaponObject aWeapon) : bool
    + getGameObject(const char* aGameObject) : GameObject*
}

interface IGameObject{
    + getName() : string
    + printName() : void
    + printDescription() : void
}

class randomGenerator{
    + randomGenerator()
    + getRandomValue(int aMin, int aMax) : int
    + shouldAttack(int aPercentage) : bool

    - {static} std::default_random_engine mEngine


}

Game o-- "0..1" DungeonFacade

Player o-- "0..*" IGameObject

DungeonFacade o--"0..1" Dungeon
GameObject --|> IGameObject





@enduml