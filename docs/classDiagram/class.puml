@startuml classDiagram

' skinparam backgroundColor #1e1e1e
' skinparam classBackgroundColor #2d2d2d
' skinparam classBorderColor White
' skinparam classFontColor White
' skinparam classAttributeIconColor White
' skinparam classArrowColor White
skinparam linetype ortho

package "Sean"{
    class Vector{}

    class Logger{}

    class String{}

    class Object{}

    enum Direction{
        North
        South
        East
        West
    }

    enum ObjectType{
        Gold
        Weapon
        Armor
        Consumable
    }

    struct ParsedLocations{
        - mId : int
        - mExits : Direction[4]
        - mEnemies : Sean::Vector<Sean::String>
        - mHiddenObjects : Sean::Vector<Sean::String>
        - mVisibleObjects : Sean::Vector<Sean::String>
        - mName : Sean::String
        - mDescription : Sean::String
    }
}



package "Backend"{

    class Location{
        + printShortDescription() : void
        + printLongDescription() : void
        + CreateEnemy(const char* aEnemy) : void
        + CreateVisibleGameObject(const char* aGameObject) : void
        + CreateHiddenGameObject(const char* aGameObject) : void

        - mNaam :char[]
        - mDescription : char[]
        - mVisibleObjects : Sean::Vector<GameObject>
        - mInVisibleObjects : Sean::Vector<GameObject>
        - mEnemies : Sean::Vector<Enemy>
        - mExits : &Location[]
    }


    class GameObjectFactory{
        + {static} createGameObject(const Sean::String &aName) : GameObject*
        + {static} createGameObject() : GameObject*
        + {static} resetCounter() : void

        - {static} incrementCounter() : void
        - {static} mCounter : int
    }

    class EnemyFactory{
        +{static} createEnemy(const Sean::String &aEnemyName) : Enemy*
        +{static} createEnemy() : Enemy*

        - {static} incrementCounter() : void
        - {static} mCounter : int
    }

    class LocationFactory{
        +{static} createLocation(const Sean::String &aLocation, const Sean::String &aDescription) : Location*
        +{static} createLocation(const Sean::String &aLocation, const Sean::String &aDescription, const int aId) : Location*
        +{static} createLocation() : Location*

        - {static} incrementCounter() : void
        - {static} mCounter : int
    }

    class GameObject{
        -mName : Sean::String
        -mDescription : Sean::String
        -mType : ObjectType

        + getName() : Sean::String
        + printName() : void
        + printDescription() : void
        + getType() : ObjectType
    }

    class GoldObject{
        - mAmount : int
    }

    class WeaponObject{
        - mMinimumDamage : int
        - mMaximumDamage : int
    }

    class ArmorObject{
        - mArmor : int
    }

    class Enemy{
        - mHealth : int
        - mAttackPercentage : int
        - mHiddenObjects : Sean::Vector<GameObject>
        - mMinimumDamage : int
        - mMaximumDamage : int
    }

    class ConsumableObject{
        - mMinimum : int
        - mMaximum : int
    }

    class Dungeon{
        + Dungeon(std::vector<Sean::ParsedLocations> &aLocations) : void
        + Dungeon(int aLocations) : void

        + update() : int
        + createGameObject(const Sean::String &aName) : GameObject*
        + pickUpObject(const char *aObjectName) : GameObject*
        + placeObject(GameObject *aObject) : void
        + printShortDescription() const : void
        + printLongDescription() const : void
        + validLocation(Sean::Direction aDirection) const : bool
        + moveLocation(Sean::Direction aDirection) : bool
        + moveHiddenObjects() : void
        + printObject(const char *aObjectName) : bool
        + teleport(int aAmount) : void
        + attackEnemy(const char *aEnemyName, int aDamage) : bool
        + getCurrentLocation() const : const Location&

        - moveEnemies() : void

        - mMap : Sean::Vector<Location>
        - mCurrentLocation : Location*
    }

    class sqlReader{
    }

    Location o-- "Visible objects 0..*" GameObject
    Location o-- "Hidden Objects 0..*"GameObject

    Enemy o-- "Hidden Objects 0..*" GameObject

    GameObject <.. GameObjectFactory
    GameObject <.. EnemyFactory

    GameObject <|-- GoldObject
    GameObject <|-- WeaponObject
    GameObject <|-- ArmorObject
    GameObject <|-- ConsumableObject

    Dungeon o-- "0..*" Location
    Dungeon <-- LocationFactory
    Dungeon <-- GameObjectFactory
    Dungeon <-- EnemyFactory

    Location <.. LocationFactory

    GameObjectFactory <-- sqlReader
    EnemyFactory <-- sqlReader
    LocationFactory <-- sqlReader

}

package "Frontend"{

    class Player{
        - mName : string
        - mHealth : int
        - mAttackPercentage : int
        - mInventory : std::vector<std::unique_ptr<IGameObject>>
        - mGold : int
        - mEquippedWeapon : IGameObject*
        - mEquippedArmor : IGameObject*
        - mGodMode : bool

        + printDescription() : void
        + equipObject(const char* aItem) : std::unique_ptr<IGameObject>
        + removeEquippedItem(IGameObject* equippedItem) : void
        + addHealth(int aHealth) : void
        + addExperience(int aExperience) : void
        + addObject(std::unique_ptr<IGameObject> aObject) : void
        + printObject(const char* aObjectName) const : bool
        + dropObject(const char* aObjectName) : std::unique_ptr<IGameObject>
        + toggleGodMode() : void
        + getInventory() : std::vector<std::unique_ptr<IGameObject>>&
        + getHealth() const : int
        + getAttackPercentage() const : int
        + getAttackDamage() const : int
        + isDead() const : bool
        + getGold() const : int
        + getName() const : std::string
    }

    class Game{
        - mPlayer : std::unique_ptr<Player>
        - mDungeon : std::unique_ptr<DungeonFacade>
        - {static} StartingWeapon : const std::string
        - mQuit : bool

        + run() : void

        - initialize() : void
        - loadDungeon() : void
        - generateDungeon() : void
        - printCurrentLocation() const : void
        - printCurrentSetting() const : void
        - playerInput() : void
        - getPlayerAction(const std::string &aInput) const : PlayerAction
        - updateDungeon() : void

        - lookAction() : void
        - searchAction() : void
        - goAction(const std::string &aDirection) : void
        - takeAction(const std::string &aObject) : void
        - dropAction(const std::string &aObject) : void
        - examineAction(const std::string &aObject) : void
        - hitAction(const std::string &aTarget) : void
        - wearAction(const std::string &aObject) : void
        - waitAction() : void
        - consumeAction(const std::string &aObject) : void
        - helpAction() const : void
        - godmodeAction() : void

        - endGame() : void
    }

    class xmlReader{
        + xmlReader(char *aPath) : void
        + getLocations() : &std::vector<Sean::ParsedLocations>

        - mParsedLocations : std::vector<Sean::ParsedLocations>
    }

    Game o-- Player

    Game <-- xmlReader

}

' Misc
class DungeonFacade{
    - mDungeon : std::unique_ptr<Dungeon>

    + createDungeon(std::vector<Sean::ParsedLocations> &aLocations) : void
    + generateDungeon(int aLocations) : void
    + printLongDescription() const : void
    + printShortDescription() const : void
    + moveHiddenObjects() : void
    + pickUpObject(const char* aObjectName) : IGameObject*
    + placeObject(std::unique_ptr<IGameObject> aObject) : bool
    + printGameObject(const char* aObjectName) const : bool
    + printEnemy(const char* aEnemyName) const : bool
    + validLocation(Sean::Direction aDirection) const : bool
    + moveLocation(Sean::Direction aDirection) : bool
    + attackEnemy(const char* aEnemyName, int aDamage) : bool
    + createGameObject(const Sean::String &aName) : IGameObject*
    + update() : int
    + teleport(int aAmount) : void
}

interface IGameObject{
    + IGameObject() : void
    + ~IGameObject() : void

    + clone() const : IGameObject*
    + getName() const : Sean::String
    + printName() const : void
    + printDescription() const : void
    + isWeapon() const : bool
    + isArmor() const : bool
    + isConsumableHealth() const : bool
    + isConsumableExperience() const : bool
    + isConsumableTeleport() const : bool
    + isMoney() const : bool
    + getValue() const : int
    + getMin() const : int
    + getMax() const : int
}

class randomGenerator{
    + randomGenerator()
    + getRandomValue(int aMin, int aMax) : int
    + shouldAttack(int aPercentage) : bool

    - {static} std::default_random_engine mEngine


}

Game o-- "0..1" DungeonFacade

Player o-- "0..*" IGameObject

DungeonFacade o--"0..1" Dungeon
GameObject --|> IGameObject





@enduml